{"ast":null,"code":"var _jsxFileName = \"/Users/eveii/Documents/*halljo/streams/src/components/StreamForm.js\";\nimport React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      //takes a set of properties from reduxForm and passes them to the input\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-unit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 13\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 13\n        }\n      })), this.renderError(meta));\n    };\n\n    this.renderDescription = ({\n      input,\n      label,\n      meta\n    }) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-unit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }\n      }, label), /*#__PURE__*/React.createElement(\"textarea\", Object.assign({\n        className: \"create-description\"\n      }, input, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      this.props.onSubmit(formValues); //POSTs an updated stream with our formValues to our API endpoint\n    };\n  }\n\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-error\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 17\n        }\n      }, error);\n    }\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      //handleSubmit takes care of preventDefault for us\n      React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"title:\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Field, {\n        name: \"streamer\",\n        component: this.renderInput,\n        label: \"streamer:\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(Field, {\n        name: \"description\",\n        component: this.renderDescription,\n        label: \"description:\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        onClick: this.props.handleSubmit(this.onSubmit),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }\n      }, \"create!\"))\n    );\n  }\n\n}\n\n;\n\nconst validate = formValues => {\n  //verifies a title and description were entered\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'you need a title!';\n  }\n\n  if (!formValues.streamer) {\n    errors.streamer = 'you need a name!';\n  }\n\n  if (!formValues.description) {\n    errors.description = 'you need a description!';\n  }\n\n  return errors; //returns an empty object if nothing is wrong\n};\n\nexport default reduxForm({\n  form: 'streamForm',\n  validate\n})(StreamForm);","map":{"version":3,"sources":["/Users/eveii/Documents/*halljo/streams/src/components/StreamForm.js"],"names":["React","Field","reduxForm","StreamForm","Component","renderInput","input","label","meta","renderError","renderDescription","onSubmit","formValues","props","error","touched","render","handleSubmit","validate","errors","title","streamer","description","form"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nclass StreamForm extends React.Component {\n    renderError({ error, touched }) {\n        if (touched && error) {\n            return (\n                <div className = \"form-error\">{error}</div>\n            );\n        }\n    }\n\n    renderInput = ({ input, label, meta }) => { //takes a set of properties from reduxForm and passes them to the input\n        return (\n            <div className = \"form-unit\">\n            <label>{label}</label>\n            <input {...input} /> \n            {this.renderError(meta)}\n            </div>\n        );\n    }\n\n    renderDescription = ({ input, label, meta }) => { \n        return (\n            <div className = \"form-unit\">\n            <label>{label}</label>\n            <textarea className = \"create-description\" {...input} /> \n            {this.renderError(meta)}\n            </div>\n        );\n    }\n\n    onSubmit = formValues => {\n        this.props.onSubmit(formValues); //POSTs an updated stream with our formValues to our API endpoint\n    }\n\n    render() {\n        return ( //handleSubmit takes care of preventDefault for us\n            <form onSubmit = {this.props.handleSubmit(this.onSubmit)}> \n                <Field name=\"title\" component={this.renderInput} label=\"title:\"/>\n                <Field name=\"streamer\" component={this.renderInput} label=\"streamer:\"/>\n                <Field name=\"description\" component={this.renderDescription} label=\"description:\"/> \n                <button onClick = {this.props.handleSubmit(this.onSubmit)}>create!</button>\n            </form>\n        );\n    }\n};\n\nconst validate = (formValues) => { //verifies a title and description were entered\n    const errors = {};\n\n    if (!formValues.title) {\n        errors.title = 'you need a title!';\n    }\n\n    if (!formValues.streamer) {\n        errors.streamer = 'you need a name!';\n    }\n\n    if (!formValues.description) {\n        errors.description = 'you need a description!';\n    }\n\n    return errors; //returns an empty object if nothing is wrong\n};\n\nexport default reduxForm({\n    form: 'streamForm',\n    validate\n})(StreamForm);"]},"metadata":{},"sourceType":"module"}