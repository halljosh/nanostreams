{"ast":null,"code":"import { CREATE_STREAM, DELETE_STREAM, EDIT_STREAM, FETCH_STREAM, FETCH_STREAMS, SIGN_IN, SIGN_OUT } from './types';\nimport history from '../history';\nimport streamsAPI from '../streamsAPI';\nexport const createStream = formValues => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth;\n  const response = await streamsAPI.post('/streams', { ...formValues,\n    userId\n  }); //posts the formValues to the streams endpoint in our API\n\n  dispatch({\n    type: CREATE_STREAM,\n    payload: response.data\n  });\n  history.push('/list'); //navigates user to StreamList on succesful stream creation\n};\nexport const deleteStream = id => async dispatch => {\n  await streamsAPI.delete(`/streams/${id}`);\n  dispatch({\n    type: DELETE_STREAM,\n    payload: id\n  });\n  history.push('/list'); //navigates user to StreamList on succesful deletion\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  const response = await streamsAPI.patch(`/streams/${id}`, formValues);\n  dispatch({\n    type: EDIT_STREAM,\n    payload: response.data\n  });\n  history.push('/list'); //navigates user to StreamList on succesful edit\n};\nexport const fetchStream = id => async dispatch => {\n  //specific GET request\n  const response = await streamsAPI.get(`/streams/${id}`);\n  dispatch({\n    type: FETCH_STREAM,\n    payload: response.data\n  });\n};\nexport const fetchStreams = () => async dispatch => {\n  //generic GET request\n  const response = await streamsAPI.get('/streams');\n  dispatch({\n    type: FETCH_STREAMS,\n    payload: response.data\n  });\n};\nexport const signIn = userId => {\n  return {\n    type: SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: SIGN_OUT\n  };\n};","map":{"version":3,"sources":["/Users/eveii/Documents/*halljo/streams/masterproject/src/actions/index.js"],"names":["CREATE_STREAM","DELETE_STREAM","EDIT_STREAM","FETCH_STREAM","FETCH_STREAMS","SIGN_IN","SIGN_OUT","history","streamsAPI","createStream","formValues","dispatch","getState","userId","auth","response","post","type","payload","data","push","deleteStream","id","delete","editStream","patch","fetchStream","get","fetchStreams","signIn","signOut"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,aAAxB,EAAuCC,WAAvC,EAAoDC,YAApD,EAAkEC,aAAlE,EAAiFC,OAAjF,EAA0FC,QAA1F,QAA0G,SAA1G;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AAEA,OAAO,MAAMC,YAAY,GAAGC,UAAU,IAAI,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACpE,QAAM;AAAEC,IAAAA;AAAF,MAAaD,QAAQ,GAAGE,IAA9B;AACA,QAAMC,QAAQ,GAAG,MAAMP,UAAU,CAACQ,IAAX,CAAgB,UAAhB,EAA4B,EAAE,GAAGN,UAAL;AAAiBG,IAAAA;AAAjB,GAA5B,CAAvB,CAFoE,CAEW;;AAE/EF,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAEjB,aAAR;AAAuBkB,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAzC,GAAD,CAAR;AACAZ,EAAAA,OAAO,CAACa,IAAR,CAAa,OAAb,EALoE,CAK7C;AAC1B,CANM;AAQP,OAAO,MAAMC,YAAY,GAAIC,EAAD,IAAQ,MAAMX,QAAN,IAAkB;AAClD,QAAMH,UAAU,CAACe,MAAX,CAAmB,YAAWD,EAAG,EAAjC,CAAN;AAEAX,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAEhB,aAAR;AAAuBiB,IAAAA,OAAO,EAAEI;AAAhC,GAAD,CAAR;AACAf,EAAAA,OAAO,CAACa,IAAR,CAAa,OAAb,EAJkD,CAI3B;AAC1B,CALM;AAOP,OAAO,MAAMI,UAAU,GAAG,CAACF,EAAD,EAAKZ,UAAL,KAAoB,MAAMC,QAAN,IAAkB;AAC5D,QAAMI,QAAQ,GAAG,MAAMP,UAAU,CAACiB,KAAX,CAAkB,YAAWH,EAAG,EAAhC,EAAmCZ,UAAnC,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAEf,WAAR;AAAqBgB,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAvC,GAAD,CAAR;AACAZ,EAAAA,OAAO,CAACa,IAAR,CAAa,OAAb,EAJ4D,CAIrC;AAC1B,CALM;AAOP,OAAO,MAAMM,WAAW,GAAIJ,EAAD,IAAQ,MAAMX,QAAN,IAAkB;AAAE;AACnD,QAAMI,QAAQ,GAAG,MAAMP,UAAU,CAACmB,GAAX,CAAgB,YAAWL,EAAG,EAA9B,CAAvB;AAEAX,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAEd,YAAR;AAAsBe,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAxC,GAAD,CAAR;AACH,CAJM;AAMP,OAAO,MAAMS,YAAY,GAAG,MAAM,MAAMjB,QAAN,IAAkB;AAAE;AAClD,QAAMI,QAAQ,GAAG,MAAMP,UAAU,CAACmB,GAAX,CAAe,UAAf,CAAvB;AAEAhB,EAAAA,QAAQ,CAAC;AAAEM,IAAAA,IAAI,EAAEb,aAAR;AAAuBc,IAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAzC,GAAD,CAAR;AACH,CAJM;AAMP,OAAO,MAAMU,MAAM,GAAIhB,MAAD,IAAY;AAC9B,SAAO;AACHI,IAAAA,IAAI,EAAEZ,OADH;AAEHa,IAAAA,OAAO,EAAEL;AAFN,GAAP;AAIH,CALM;AAOP,OAAO,MAAMiB,OAAO,GAAG,MAAM;AACzB,SAAO;AACHb,IAAAA,IAAI,EAAEX;AADH,GAAP;AAGH,CAJM","sourcesContent":["import { CREATE_STREAM, DELETE_STREAM, EDIT_STREAM, FETCH_STREAM, FETCH_STREAMS, SIGN_IN, SIGN_OUT } from './types';\nimport history from '../history';\nimport streamsAPI from '../streamsAPI';\n\nexport const createStream = formValues => async (dispatch, getState) => {\n    const { userId } = getState().auth;\n    const response = await streamsAPI.post('/streams', { ...formValues, userId }); //posts the formValues to the streams endpoint in our API\n\n    dispatch({ type: CREATE_STREAM, payload: response.data });\n    history.push('/list'); //navigates user to StreamList on succesful stream creation\n};\n\nexport const deleteStream = (id) => async dispatch => {\n    await streamsAPI.delete(`/streams/${id}`);\n\n    dispatch({ type: DELETE_STREAM, payload: id });\n    history.push('/list'); //navigates user to StreamList on succesful deletion\n};\n\nexport const editStream = (id, formValues) => async dispatch => {\n    const response = await streamsAPI.patch(`/streams/${id}`, formValues);\n\n    dispatch({ type: EDIT_STREAM, payload: response.data });\n    history.push('/list'); //navigates user to StreamList on succesful edit\n};\n\nexport const fetchStream = (id) => async dispatch => { //specific GET request\n    const response = await streamsAPI.get(`/streams/${id}`);\n\n    dispatch({ type: FETCH_STREAM, payload: response.data })\n};\n\nexport const fetchStreams = () => async dispatch => { //generic GET request\n    const response = await streamsAPI.get('/streams');\n\n    dispatch({ type: FETCH_STREAMS, payload: response.data });\n};\n\nexport const signIn = (userId) => {\n    return {\n        type: SIGN_IN,\n        payload: userId\n    };\n};\n\nexport const signOut = () => {\n    return {\n        type: SIGN_OUT\n    };\n};"]},"metadata":{},"sourceType":"module"}